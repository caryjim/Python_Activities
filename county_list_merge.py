# -*- coding: utf-8 -*-
# Miniconda has been successfully installed at "C:/Users/mscar/AppData/Local/r-miniconda".
# Python 3.6.13 (C:/Users/mscar/AppData/Local/r-miniconda/envs/r-reticulate/python.exe)
# Reticulate 1.18 REPL -- A Python interpreter in R.
# 
"""county_list.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aajCiOlOpvwhagjGxVLM--uYGSGX89sI
"""
# To activate this environment, use
#
#     $ conda activate r-reticulate
#
# To deactivate an active environment, use
#
#     $ conda deactivate

# library(reticulate)
# reticulate::use_miniconda()
!pip install pandas

import pandas as pd

"""https://stackoverflow.com/questions/18986864/how-to-create-multiple-value-dictionary-from-pandas-data-frame

### Add state abbreviation to broadband data
"""

#Broadband Now released data on github
broadbandurl = 'https://raw.githubusercontent.com/BroadbandNow/Open-Data/master/broadband_data_opendatachallenge.csv?raw=True'
broadband = pd.read_csv(broadbandurl, sep=',', encoding='latin-1')
# The raw data have numerical values in population, percent of access and lowest price.
# However, they were loaded as character and needs to be converted to numeric

broadband.head()

# Broadband Usage Estimates by County Level 
microsoft = 'https://raw.githubusercontent.com/microsoft/USBroadbandUsagePercentages/3cc660f1f54fd73274527a4a60ef870726abf2ba/dataset/broadband_data_zipcode.csv?raw=true'

usage_zip = pd.read_csv(microsoft, sep = ",")

usage_zip.head()

#I found a list of State abbrevation and state name key:value pair, load the file into Colab before running this. 
state_list = pd.read_csv('/content/state_ablist.txt', delimiter= '|', header=None)

state_list.head()

#Turn state list into key-value pair 
state_abb = dict(zip(state_list[1], state_list[0]))

state_abb

#Add a column of state abbreviation Broadband data 
broadband["ST"] = broadband["State"].map(state_abb)

broadband.head()

usage_zip.head()



"""### Map zip code and county ID to a new column in broadband data

Create a dictionary for Zipcode and County ID pairs from SEDA Crosswalk file [HUB Crosswalk](https://www.huduser.gov/portal/datasets/usps_crosswalk.html)
"""

#Load the modified HUB Crosswalk file 2019 1st Quarter into Google Colab first
hub = pd.read_csv('/content/ZIP_county.txt', delimiter= '\t')

hub.head()

hub.info()

#seda['countyid'] = seda['countyid'].astype('Int64')
#seda['lzip'] = seda['lzip'].astype('Int64')  
#when conver to int, it is giving error message due to missing values, assign it as Int64 solved the problem

zip_county_ID = dict(zip(hub['zip'], hub['county']))
zip_county_ID

# zip_county_ID = dict(zip(usage_zip['POSTAL CODE'], usage_zip['COUNTY ID']))
# This list use the usage data, but some zip codes are not having county information in this list for mapping

#Add a column of countyID to the Broadband data by zipcode
broadband["countyID"] = broadband["Zip"].map(zip_county_ID)

broadband.head()

broadband['countyID'].isna().sum()

broadband[broadband['countyID'].isnull()] #Double Brackets will select the rows that have missing values in the countyID column

#export the file for use 

# This allow you to set up google drive as the directory. 
from google.colab import drive
drive.mount('/content/drive')

import os   # Assign the folder as current directory 
os.chdir('/content/drive/My Drive/Colab Notebooks/Create county id and name dictionary')

broadband.to_csv(('/content/drive/My Drive/Colab Notebooks/Create county id and name dictionary/broadband.csv'), index=False)

"""Create a multiple value dictionary from the microsoft dataset """

#Make County ID and County Name as a dictionary 
county_list = dict(zip(usage_zip['COUNTY NAME'], usage_zip['COUNTY ID']))

a = usage_zip.groupby('POSTAL CODE')
#First, group the zip code values in the usage dataset, a is stored as a grouby-dataframe 
a['COUNTY ID'].apply(lambda s: s.tolist())
#Apply tolist() function to each of the group in zipcode by County ID
